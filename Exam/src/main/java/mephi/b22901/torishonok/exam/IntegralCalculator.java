package mephi.b22901.torishonok.exam;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */

/**
 *
 * @author vikus
 */
import javax.swing.*;
import java.awt.*;
import java.util.List;

public class IntegralCalculator extends JFrame {

    // –¢—Ä—É–¥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞¬∑—á–∞—Å (—Ä—É–±.)
    private static final double PRICE_L = 500;

    public IntegralCalculator() {
        setTitle("–ò–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞");
        setSize(900, 600);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
        panel.setBorder(BorderFactory.createEmptyBorder(30, 30, 30, 30));
        panel.setBackground(Color.WHITE);

        JLabel titleLabel = new JLabel("<html><h2 style='text-align:center;'>–ò–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏</h2></html>", SwingConstants.CENTER);
        titleLabel.setAlignmentX(Component.LEFT_ALIGNMENT);
        titleLabel.setFont(new Font("Segoe UI", Font.BOLD, 24));
        titleLabel.setBorder(BorderFactory.createEmptyBorder(10, 10, 40, 10));
        panel.add(titleLabel);

        List<RoomData> roomList = ExcelLoader.getRoomDataList();
        List<WorkData> workList = WorkLoader.getWorkDataList();

        if (roomList == null || workList == null || workList.isEmpty()) {
            JOptionPane.showMessageDialog(this, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.", "–û—à–∏–±–∫–∞", JOptionPane.ERROR_MESSAGE);
            return;
        }

        double totalCost = 0;
        double totalTime = 0;
        double collectiveDose = 0;
        int totalWorkers = 0;

        for (WorkData work : workList) {
            RoomData room = findRoomByCode(roomList, work.getRoomCode());
            if (room == null) continue;

            double mdi = room.getRadiationDoseRate(); // –ú–æ—â–Ω–æ—Å—Ç—å –¥–æ–∑—ã –∏–∑–ª—É—á–µ–Ω–∏—è
            double hv = work.getTimeNorm();           // –ù–æ—Ä–º–∞ –≤—Ä–µ–º–µ–Ω–∏
            int kr = work.getWorkersCount();          // –ß–∏—Å–ª–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤
            String workType = work.getWorkType().trim().toLowerCase();
            double price_c = work.getPrice();         // –¶–µ–Ω–∞ –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ "–¶–µ–Ω–∞"
            double pr = getWorkArea(work, room);      // –ü–ª–æ—â–∞–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
            double gr = getAverageContaminationDepth(room, work); // –ì–ª—É–±–∏–Ω–∞ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏—è

            // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            System.out.printf("üßæ –†–∞–±–æ—Ç–∞: %s%n", work.getWorkName());
            System.out.printf(" - –ö–æ–º–Ω–∞—Ç–∞: %s (%s)%n", room.getRoomName(), room.getRoomCode());
            System.out.printf(" - –¢–∏–ø: %s%n", workType);
            System.out.printf(" - –ú–î–ò: %.2f%n", mdi);
            System.out.printf(" - –¶–µ–Ω–∞: %.2f%n", price_c);
            System.out.printf(" - –ù–æ—Ä–º–∞ –≤—Ä–µ–º–µ–Ω–∏: %d%n", work.getTimeNorm());
            System.out.printf(" - –†–∞–±–æ—Ç–Ω–∏–∫–∏: %d%n", work.getWorkersCount());
            System.out.printf(" - –ü–ª–æ—â–∞–¥—å: %.2f%n", pr);
            System.out.printf(" - –ì–ª—É–±–∏–Ω–∞: %.2f%n", gr);
            System.out.println("------------------------------");

            if (mdi <= 0) System.err.println("‚ö†Ô∏è –ú–î–ò = 0 –¥–ª—è –ø–æ–º–µ—â–µ–Ω–∏—è: " + room.getRoomCode());
            if (price_c <= 0) System.err.println("‚ö†Ô∏è –¶–µ–Ω–∞ = 0 –¥–ª—è —Ä–∞–±–æ—Ç—ã: " + work.getWorkName());
            if (hv <= 0) System.err.println("‚ö†Ô∏è –ù–æ—Ä–º–∞ –≤—Ä–µ–º–µ–Ω–∏ = 0 –¥–ª—è —Ä–∞–±–æ—Ç—ã: " + work.getWorkName());
            if (kr <= 0) System.err.println("‚ö†Ô∏è –ß–∏—Å–ª–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ = 0 –¥–ª—è —Ä–∞–±–æ—Ç—ã: " + work.getWorkName());

            double time;
            double cost;

            if ("–ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω–∞—è".equalsIgnoreCase(workType)) {
                time = hv / kr * pr;
                cost = price_c * pr + time * kr * PRICE_L;

            } else if ("—Å –∫–æ–ª".equalsIgnoreCase(workType)) {
                int ceilDepth = (int) Math.ceil(gr / 10.0); // –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö
                time = hv / kr * pr * ceilDepth;
                cost = price_c * pr * ceilDepth + time * kr * PRICE_L;

            } else {
                System.err.println("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ä–∞–±–æ—Ç—ã: " + workType);
                continue;
            }

            double kdo = mdi * time * kr;
            double ido = kdo / kr;

            totalCost += cost;
            totalTime += time;
            collectiveDose += kdo;
            totalWorkers += kr;
        }

        // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ GUI
        JLabel costLabel = new JLabel(String.format("a. –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞: %.2f —Ä—É–±.", totalCost));
        JLabel timeLabel = new JLabel(String.format("b. –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: %.2f —á", totalTime));
        JLabel doseCollectiveLabel = new JLabel(String.format("c. –ö–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–∞—è —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–∞—è –¥–æ–∑–∞: %.2f –º–∫–ó–≤", collectiveDose));
        JLabel doseIndividualLabel = new JLabel(String.format("d. –°—Ä–µ–¥–Ω—è—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –¥–æ–∑–∞: %.2f –º–∫–ó–≤", totalWorkers > 0 ? collectiveDose / totalWorkers : 0));

        Font labelFont = new Font("Segoe UI", Font.PLAIN, 18);
        costLabel.setFont(labelFont);
        timeLabel.setFont(labelFont);
        doseCollectiveLabel.setFont(labelFont);
        doseIndividualLabel.setFont(labelFont);

        costLabel.setAlignmentX(Component.LEFT_ALIGNMENT);
        timeLabel.setAlignmentX(Component.LEFT_ALIGNMENT);
        doseCollectiveLabel.setAlignmentX(Component.LEFT_ALIGNMENT);
        doseIndividualLabel.setAlignmentX(Component.LEFT_ALIGNMENT);

        panel.add(costLabel);
        panel.add(Box.createRigidArea(new Dimension(0, 10)));
        panel.add(timeLabel);
        panel.add(Box.createRigidArea(new Dimension(0, 10)));
        panel.add(doseCollectiveLabel);
        panel.add(Box.createRigidArea(new Dimension(0, 10)));
        panel.add(doseIndividualLabel);
        showDetailedResults(workList, roomList);

        add(panel);
        setVisible(true);
    }
    
    private void showDetailedResults(List<WorkData> workList, List<RoomData> roomList) {
    StringBuilder sb = new StringBuilder();
    sb.append("üßÆ –î–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç:\n\n");

    for (WorkData work : workList) {
        RoomData room = findRoomByCode(roomList, work.getRoomCode());
        if (room == null) continue;

        double mdi = room.getRadiationDoseRate();
        double hv = work.getTimeNorm();
        int kr = work.getWorkersCount();
        double pr = getWorkArea(work, room);
        double gr = getAverageContaminationDepth(room, work);
        String workType = work.getWorkType().trim().toLowerCase();
        double price_c = work.getPrice();

        double time;
        double cost;
        double kdo;
        double ido;

        if ("–ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω–∞—è".equalsIgnoreCase(workType)) {
            time = hv / kr * pr;
            cost = price_c * pr + time * kr * PRICE_L;
        } else if ("—Å –∫–æ–ª".equalsIgnoreCase(workType)) {
            int ceilDepth = (int) Math.ceil(gr / 10.0);
            time = hv / kr * pr * ceilDepth;
            cost = price_c * pr * ceilDepth + time * kr * PRICE_L;
        } else {
            continue;
        }

        kdo = mdi * time * kr;
        ido = kdo / kr;

        sb.append("–†–∞–±–æ—Ç–∞: ").append(work.getWorkName()).append("\n");
        sb.append(" - –ö–æ–º–Ω–∞—Ç–∞: ").append(room.getRoomName()).append(" (").append(room.getRoomCode()).append(")\n");
        sb.append(" - –¢–∏–ø: ").append(workType).append("\n");
        sb.append(" - –í—Ä–µ–º—è: ").append(time).append(" —á\n");
        sb.append(" - –°—Ç–æ–∏–º–æ—Å—Ç—å: ").append(cost).append(" —Ä—É–±.\n");
        sb.append(" - –ö–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–∞—è –¥–æ–∑–∞: ").append(kdo).append(" –º–∫–ó–≤\n");
        sb.append(" - –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –¥–æ–∑–∞: ").append(ido).append(" –º–∫–ó–≤\n");
        sb.append("------------------------------\n");
    }

            JTextArea area = new JTextArea(sb.toString());
            area.setEditable(false);
            JScrollPane scrollPane = new JScrollPane(area);
            //panel.add(scrollPane);
        }

    // –ü–æ–∏—Å–∫ –∫–æ–º–Ω–∞—Ç—ã –ø–æ –∫–æ–¥—É
    private RoomData findRoomByCode(List<RoomData> rooms, String code) {
        for (RoomData r : rooms) {
            if (r.getRoomCode().equals(code)) {
                System.out.println("‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–º–µ—â–µ–Ω–∏–µ: " + code);
                return r;
            }
        }
        System.err.println("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–º–µ—â–µ–Ω–∏–µ —Å –∫–æ–¥–æ–º: " + code);
        return null;
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–ª–æ—â–∞–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
    private double getWorkArea(WorkData work, RoomData room) {
        String part = work.getPart().toLowerCase();
        if (part.contains("—Å—Ç–µ–Ω")) {
            return room.getWallCoveringArea();
        } else if (part.contains("–ø–æ—Ç–æ–ª–æ–∫")) {
            return room.getCeilingCoveringArea();
        } else if (part.contains("–ø–æ–ª")) {
            return room.getFloorCoveringArea();
        }
        return 0;
    }

    // –ü–æ–ª—É—á–∞–µ–º –≥–ª—É–±–∏–Ω—É –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏—è
    private double getAverageContaminationDepth(RoomData room, WorkData work) {
        String part = work.getPart().toLowerCase();
        if (part.contains("—Å—Ç–µ–Ω")) {
            return room.getContaminationWallDepth();
        } else if (part.contains("–ø–æ—Ç–æ–ª–æ–∫")) {
            return room.getContaminationCeilingDepth();
        } else if (part.contains("–ø–æ–ª")) {
            return room.getContaminationFloorDepth();
        }
        return 0;
    }
}